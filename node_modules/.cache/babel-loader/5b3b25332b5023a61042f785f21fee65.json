{"ast":null,"code":"var _jsxFileName = \"/Users/junsoopark/Desktop/project/Final Project/project4-captain_citizen/project4-captain_citizen-frontend/captain_citizen_america/src/Map/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { GoogleMap, useJsApiLoader, MarkerF, InfoWindow } from '@react-google-maps/api';\nimport \"./map.css\";\nimport mapStyles from './mapStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '100%',\n  margin: '0 auto'\n};\nconst center = {\n  lat: 40.74112,\n  lng: -73.98974\n};\n\nfunction Map(_ref) {\n  _s();\n\n  let {\n    userData\n  } = _ref;\n  // console.log(props);\n  const isLoaded = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyAwcOSQ6hnqoqiXX_1D1ykHOBAZZ2UorHE\",\n    libraries: ['places']\n  });\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const [duration, setDuration] = useState(null);\n  const [currentLocation, setCurrentLocation] = useState({\n    lat: 40.74112,\n    lng: -73.98974\n  });\n  const [destination, setDestination] = useState({\n    lat: null,\n    lng: null\n  });\n  const calculateDistance = useCallback(() => {\n    const origin = new google.maps.LatLng(currentLocation.lat, currentLocation.lng);\n    const destination = new google.maps.LatLng(destination.lat, destination.lng);\n    const service = new google.maps.DistanceMatrixService();\n    service.getDistanceMatrix({\n      origins: [origin],\n      destinations: [destination],\n      travelMode: google.maps.TravelMode.WALKING,\n      unitSystem: google.maps.UnitSystem.IMPERIAL\n    }, (response, status) => {\n      if (status === google.maps.DistanceMatrixStatus.OK) {\n        const {\n          distance,\n          duration\n        } = response.rows[0].elements[0];\n        setDistance(distance.text);\n        setDuration(duration.text);\n      }\n    });\n  }, [currentLocation, destination]);\n  const clearRoute = useCallback(() => {\n    setSelectedPlace(null);\n    setDistance(null);\n    setDuration(null);\n  }, [setSelectedPlace, setDistance, setDuration]);\n  const image = \"./images/Captain_America's_Shield.png\";\n  const userMarker = \"./images/user.png\";\n  const [selectedMarker, setSelectedMarker] = useState(); // console.log(selectedMarker);\n  // console.log(destination);\n\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 16,\n    options: {\n      styles: mapStyles\n    },\n    children: [/*#__PURE__*/_jsxDEV(MarkerF, {\n      position: currentLocation,\n      icon: {\n        url: userMarker,\n        scaledSize: new window.google.maps.Size(25, 35)\n      },\n      onClick: () => {\n        setSelectedMarker(currentLocation);\n        setSelectedPlace(currentLocation);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), userData.map(user => {\n      let lat = parseFloat(user.lat);\n      let lng = parseFloat(user.lng);\n      return /*#__PURE__*/_jsxDEV(MarkerF, {\n        position: {\n          lat: lat,\n          lng: lng\n        },\n        icon: {\n          url: image,\n          scaledSize: new window.google.maps.Size(28, 28)\n        },\n        onClick: () => {\n          setSelectedMarker(user);\n          setDestination({ ...destination,\n            lat: selectedMarker.lat,\n            lng: selectedMarker.lng\n          });\n          console.log(user);\n        }\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this);\n    }), selectedMarker && /*#__PURE__*/_jsxDEV(InfoWindow, {\n      position: {\n        lat: parseFloat(selectedMarker.lat),\n        lng: parseFloat(selectedMarker.lng)\n      },\n      onCloseClick: () => {\n        setSelectedMarker(null);\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"infoWindow\",\n        children: [\"User Details\", /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Name: \", selectedMarker.first_name, \" \", selectedMarker.last_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => calculateDistance(),\n          children: \"Navigate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Map, \"x3y6autaq1ZR6HyqsQcr03Mgen0=\", false, function () {\n  return [useJsApiLoader];\n});\n\n_c = Map;\nexport default _c2 = /*#__PURE__*/React.memo(Map);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","GoogleMap","useJsApiLoader","MarkerF","InfoWindow","mapStyles","containerStyle","width","height","margin","center","lat","lng","Map","userData","isLoaded","id","googleMapsApiKey","libraries","selectedPlace","setSelectedPlace","distance","setDistance","duration","setDuration","currentLocation","setCurrentLocation","destination","setDestination","calculateDistance","origin","google","maps","LatLng","service","DistanceMatrixService","getDistanceMatrix","origins","destinations","travelMode","TravelMode","WALKING","unitSystem","UnitSystem","IMPERIAL","response","status","DistanceMatrixStatus","OK","rows","elements","text","clearRoute","image","userMarker","selectedMarker","setSelectedMarker","styles","url","scaledSize","window","Size","map","user","parseFloat","console","log","first_name","last_name","memo"],"sources":["/Users/junsoopark/Desktop/project/Final Project/project4-captain_citizen/project4-captain_citizen-frontend/captain_citizen_america/src/Map/Map.js"],"sourcesContent":["import React, {useState, useCallback, useEffect} from 'react'\nimport { GoogleMap, useJsApiLoader, MarkerF, InfoWindow, } from '@react-google-maps/api';\nimport \"./map.css\"\nimport mapStyles from './mapStyles'\n\nconst containerStyle = {\n  width: '100%',\n  height: '100%',\n  margin: '0 auto',\n}\n\nconst center = {\n  lat: 40.74112,\n  lng: -73.98974\n}\n\nfunction Map({userData}) {\n  // console.log(props);\n  const isLoaded = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyAwcOSQ6hnqoqiXX_1D1ykHOBAZZ2UorHE\",\n    libraries: ['places'],\n  })\n\n  const [selectedPlace, setSelectedPlace] = useState(null)\n  const [distance, setDistance] = useState(null)\n  const [duration, setDuration] = useState(null)\n  const [currentLocation, setCurrentLocation] = useState({\n    lat: 40.74112,\n    lng: -73.98974\n  })\n  const [destination, setDestination] = useState({\n    lat: null,\n    lng: null\n  })\n\n  const calculateDistance = useCallback(() => {\n    const origin = new google.maps.LatLng(currentLocation.lat, currentLocation.lng)\n    const destination = new google.maps.LatLng(destination.lat, destination.lng)\n    const service = new google.maps.DistanceMatrixService()\n    service.getDistanceMatrix({\n      origins: [origin],\n      destinations: [destination],\n      travelMode: google.maps.TravelMode.WALKING,\n      unitSystem: google.maps.UnitSystem.IMPERIAL,\n    }, (response, status) => {\n      if (status ===  google.maps.DistanceMatrixStatus.OK) {\n        const { distance, duration } = response.rows[0].elements[0]\n        setDistance(distance.text)\n        setDuration(duration.text)\n      }\n    })\n  }, [currentLocation, destination])\n\n  const clearRoute = useCallback(() => {\n    setSelectedPlace(null)\n    setDistance(null)\n    setDuration(null)\n  }\n  , [setSelectedPlace, setDistance, setDuration])\n\n\n  \n  const image = \"./images/Captain_America's_Shield.png\"\n  const userMarker = \"./images/user.png\"\n\n  const [selectedMarker, setSelectedMarker] = useState()\n\n  // console.log(selectedMarker);\n  // console.log(destination);\n\n  return isLoaded ? (\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={16}\n        options={{styles: mapStyles}}\n      >\n\n        <MarkerF\n          position={currentLocation}\n          icon={{\n            url: userMarker,\n            scaledSize: new window.google.maps.Size(25, 35)\n          }}\n          onClick={() => {\n            setSelectedMarker(currentLocation)\n            setSelectedPlace(currentLocation)\n          }\n          }\n        />\n\n      {userData.map((user) => {\n    let lat = parseFloat(user.lat);\n    let lng = parseFloat(user.lng);\n\n    return (\n      <MarkerF\n      key={user.id}\n      position= {{lat: lat, lng: lng}} \n      icon={{\n        url: image,\n        scaledSize: new window.google.maps.Size(28,28)\n      }}\n      onClick={() => {\n        setSelectedMarker(user)\n        setDestination({\n          ...destination,\n          lat: selectedMarker.lat, \n          lng: selectedMarker.lng\n        })\n        console.log(user)\n      }}\n      />\n    )\n  })\n}\n\n\n      {selectedMarker && \n      (<InfoWindow\n      position= {{lat: parseFloat(selectedMarker.lat), lng: parseFloat(selectedMarker.lng)}}\n      onCloseClick={() => {\n        setSelectedMarker(null)\n      }}\n      >\n      <div id='infoWindow'>\n        User Details\n        <p>Name: {selectedMarker.first_name} {selectedMarker.last_name}</p>\n        <button onClick={() => calculateDistance()}>Navigate</button>\n      </div>\n      </InfoWindow>\n      )}\n\n    </GoogleMap>\n     \n\n    \n    \n  ) : <h1>Loading</h1>\n}\nexport default React.memo(Map)"],"mappings":"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"},"metadata":{},"sourceType":"module"}